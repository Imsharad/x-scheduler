---
description: 
globs: 
alwaysApply: true
---
# Project Structure

The project follows this directory structure:

```
twitter-automation-pipeline/
├── src/                     # Core source code
│   ├── __init__.py
│   ├── main.py              # Main execution script
│   ├── config_loader.py     # Loads config from .env and config file
│   ├── content_sources/     # Module for different content sources
│   │   ├── __init__.py
│   │   ├── base_source.py   # Abstract base class for sources
│   │   ├── rss_source.py    # Implementation for RSS feeds
│   │   └── file_source.py   # Implementation for curated file source
│   ├── content_processor.py # Handles templating, hashtagging, CTAs, UTMs
│   ├── scheduler.py         # Sets up and runs the scheduling logic
│   ├── twitter_poster.py    # Handles interaction with the X API
│   └── utils.py             # Utility functions (logging, retry logic)
├── config/                  # Configuration files
│   ├── config.yaml          # Main configuration
│   └── .env.example         # Example environment variables file
├── data/                    # Data files used/generated by the pipeline
│   ├── curated_content.csv  # Example curated content file
│   └── processed_log.txt    # Log of processed items to avoid duplicates
├── logs/                    # Log files generated by the application
│   └── pipeline.log         # Main log file
├── scripts/                 # Helper scripts
│   └── setup_env.sh         # Script to help create .env
├── tests/                   # Unit/Integration tests
├── .gitignore               # Git ignore file
├── README.md                # Project documentation
└── requirements.txt         # Python dependencies
```

## Key Files
- [src/main.py](mdc:src/main.py) - Entry point for single runs of the pipeline
- [src/scheduler.py](mdc:src/scheduler.py) - Main script for running the pipeline continuously
- [config/config.yaml](mdc:config/config.yaml) - Configuration settings
- [README.md](mdc:README.md) - Setup and usage instructions
